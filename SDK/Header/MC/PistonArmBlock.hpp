// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "PistonBlock.hpp"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PistonArmBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PISTONARMBLOCK
public:
    class PistonArmBlock& operator=(class PistonArmBlock const&) = delete;
    PistonArmBlock(class PistonArmBlock const&) = delete;
    PistonArmBlock() = delete;
#endif

public:
    /*0*/ virtual ~PistonArmBlock();
    /*1*/ virtual bool hasTag(class BlockSource&, class BlockPos const&, class Block const&, std::string const&) const;
    /*2*/ virtual bool getCollisionShape(class AABB&, class Block const&, class BlockSource const&, class BlockPos const&, class optional_ref<struct IActorMovementProxy>) const;
    /*3*/ virtual bool isObstructingChests(class BlockSource&, class BlockPos const&) const;
    /*4*/ virtual class Vec3 randomlyModifyPosition(class BlockPos const&) const;
    /*5*/ virtual class AABB const& getAABB(class BlockSource const&, class BlockPos const&, class Block const&, class AABB&, bool) const;
    /*6*/ virtual bool addCollisionShapes(class Block const&, class BlockSource&, class BlockPos const&, class AABB const*, std::vector<class AABB>&, class optional_ref<struct IActorMovementProxy>) const;
    /*7*/ virtual void onProjectileHit(class BlockSource&, class BlockPos const&, class Actor const&) const;
    /*8*/ virtual void onLightningHit(class BlockSource&, class BlockPos const&) const;
    /*9*/ virtual bool liquidCanFlowIntoFromDirection(unsigned char, class std::function<class Block const& (class BlockPos const& )> const&, class BlockPos const&) const;
    /*10*/ virtual void __unk_vfn_0();
    /*11*/ virtual bool isStrippable(class Block const&) const;
    /*12*/ virtual class Block const& getStrippedBlock(class Block const&) const;
    /*13*/ virtual bool canProvideSupport(class Block const&, unsigned char, enum BlockSupportType) const;
    /*14*/ virtual class CopperBehavior const* tryGetCopperBehavior() const;
    /*15*/ virtual void __unk_vfn_1();
    /*16*/ virtual void __unk_vfn_2();
    /*17*/ virtual void __unk_vfn_3();
    /*18*/ virtual void __unk_vfn_4();
    /*19*/ virtual void __unk_vfn_5();
    /*20*/ virtual void __unk_vfn_6();
    /*21*/ virtual void __unk_vfn_7();
    /*22*/ virtual void __unk_vfn_8();
    /*23*/ virtual void __unk_vfn_9();
    /*24*/ virtual void __unk_vfn_10();
    /*25*/ virtual bool isDoubleSlabBlock() const;
    /*26*/ virtual void __unk_vfn_11();
    /*27*/ virtual void __unk_vfn_12();
    /*28*/ virtual void __unk_vfn_13();
    /*29*/ virtual void __unk_vfn_14();
    /*30*/ virtual void __unk_vfn_15();
    /*31*/ virtual void __unk_vfn_16();
    /*32*/ virtual bool canBeAscendedByJumping(class Actor const&, class BlockPos const&) const;
    /*33*/ virtual bool isValidAuxValue(int) const;
    /*34*/ virtual bool canFillAtPos(class BlockSource&, class BlockPos const&, class Block const&) const;
    /*35*/ virtual void onFillBlock(class BlockSource&, class BlockPos const&, class Block const&) const;
    /*36*/ virtual int getDirectSignal(class BlockSource&, class BlockPos const&, int) const;
    /*37*/ virtual void __unk_vfn_17();
    /*38*/ virtual void __unk_vfn_18();
    /*39*/ virtual bool canContainLiquid() const;
    /*40*/ virtual bool shouldConnectToRedstone(class BlockSource&, class BlockPos const&, int) const;
    /*41*/ virtual void handlePrecipitation(class BlockSource&, class BlockPos const&, float, float) const;
    /*42*/ virtual float getFlexibility(class BlockSource&, class BlockPos const&) const;
    /*43*/ virtual bool shouldDispense(class BlockSource&, class Container&) const;
    /*44*/ virtual bool dispense(class BlockSource&, class Container&, int, class Vec3 const&, unsigned char) const;
    /*45*/ virtual void transformOnFall(class BlockSource&, class BlockPos const&, class Actor*, float) const;
    /*46*/ virtual void onRedstoneUpdate(class BlockSource&, class BlockPos const&, int, bool) const;
    /*47*/ virtual void onMove(class BlockSource&, class BlockPos const&, class BlockPos const&) const;
    /*48*/ virtual void __unk_vfn_19();
    /*49*/ virtual void movedByPiston(class BlockSource&, class BlockPos const&) const;
    /*50*/ virtual void onStructureBlockPlace(class BlockSource&, class BlockPos const&) const;
    /*51*/ virtual void onStructureNeighborBlockPlace(class BlockSource&, class BlockPos const&) const;
    /*52*/ virtual void setupRedstoneComponent(class BlockSource&, class BlockPos const&) const;
    /*53*/ virtual enum BlockProperty getRedstoneProperty(class BlockSource&, class BlockPos const&) const;
    /*54*/ virtual void __unk_vfn_20();
    /*55*/ virtual bool isFilteredOut(enum BlockRenderLayer) const;
    /*56*/ virtual void __unk_vfn_21();
    /*57*/ virtual bool ignoreEntitiesOnPistonMove(class Block const&) const;
    /*58*/ virtual bool onFertilized(class BlockSource&, class BlockPos const&, class Actor*, enum FertilizerType) const;
    /*59*/ virtual bool mayConsumeFertilizer(class BlockSource&) const;
    /*60*/ virtual bool canBeFertilized(class BlockSource&, class BlockPos const&, class Block const&) const;
    /*61*/ virtual bool mayPick() const;
    /*62*/ virtual bool mayPlace(class BlockSource&, class BlockPos const&, unsigned char) const;
    /*63*/ virtual bool mayPlaceOn(class BlockSource&, class BlockPos const&) const;
    /*64*/ virtual bool tryToTill(class BlockSource&, class BlockPos const&, class Actor&, class ItemStack&) const;
    /*65*/ virtual bool breaksFallingBlocks(class Block const&, class BaseGameVersion) const;
    /*66*/ virtual void destroy(class BlockSource&, class BlockPos const&, class Block const&, class Actor*) const;
    /*67*/ virtual bool playerWillDestroy(class Player&, class BlockPos const&, class Block const&) const;
    /*68*/ virtual bool getIgnoresDestroyPermissions(class Actor&, class BlockPos const&) const;
    /*69*/ virtual void neighborChanged(class BlockSource&, class BlockPos const&, class BlockPos const&) const;
    /*70*/ virtual bool getSecondPart(class BlockSource const&, class BlockPos const&, class BlockPos&) const;
    /*71*/ virtual int getResourceCount(class Randomize&, class Block const&, int) const;
    /*72*/ virtual class ItemInstance getResourceItem(class Randomize&, class Block const&, int) const;
    /*73*/ virtual class ItemInstance asItemInstance(class BlockSource&, class BlockPos const&, class Block const&) const;
    /*74*/ virtual void spawnResources(class BlockSource&, class BlockPos const&, class Block const&, class Randomize&, std::vector<class Item const* >*, float, int) const;
    /*75*/ virtual void __unk_vfn_22();
    /*76*/ virtual class Block const& getPlacementBlock(class Actor&, class BlockPos const&, unsigned char, class Vec3 const&, int) const;
    /*77*/ virtual bool isAttachedTo(class BlockSource&, class BlockPos const&, class BlockPos&) const;
    /*78*/ virtual bool attack(class Player*, class BlockPos const&) const;
    /*79*/ virtual void handleEntityInside(class BlockSource&, class BlockPos const&, class Actor*, class Vec3&) const;
    /*80*/ virtual void entityInside(class BlockSource&, class BlockPos const&, class Actor&) const;
    /*81*/ virtual int getExperienceDrop(class Random&) const;
    /*82*/ virtual void triggerEvent(class BlockSource&, class BlockPos const&, int, int) const;
    /*83*/ virtual void __unk_vfn_23();
    /*84*/ virtual float calcGroundFriction(struct IMobMovementProxy const&, class BlockPos const&) const;
    /*85*/ virtual void __unk_vfn_24();
    /*86*/ virtual void __unk_vfn_25();
    /*87*/ virtual int getComparatorSignal(class BlockSource&, class BlockPos const&, class Block const&, unsigned char) const;
    /*88*/ virtual bool canSpawnAt(class BlockSource const&, class BlockPos const&) const;
    /*89*/ virtual void notifySpawnedAt(class BlockSource&, class BlockPos const&) const;
    /*90*/ virtual void __unk_vfn_26();
    /*91*/ virtual int getIconYOffset() const;
    /*92*/ virtual bool isAuxValueRelevantForPicking() const;
    /*93*/ virtual int getColor(class Block const&) const;
    /*94*/ virtual int getColor(class BlockSource&, class BlockPos const&, class Block const&) const;
    /*95*/ virtual int getColorAtPos(class BlockSource&, class BlockPos const&) const;
    /*96*/ virtual bool isSeasonTinted(class Block const&, class BlockSource&, class BlockPos const&) const;
    /*97*/ virtual class AABB const& getVisualShape(class Block const&, class AABB&, bool) const;
    /*98*/ virtual void __unk_vfn_27();
    /*99*/ virtual class Block const& getRenderBlock() const;
    /*100*/ virtual unsigned char getMappedFace(unsigned char, class Block const&) const;
    /*101*/ virtual enum Flip getFaceFlip(unsigned char, class Block const&) const;
    /*102*/ virtual void animateTick(class BlockSource&, class BlockPos const&, class Random&) const;
    /*103*/ virtual void __unk_vfn_28();
    /*104*/ virtual class Block const* tryLegacyUpgrade(unsigned short) const;
    /*105*/ virtual bool dealsContactDamage(class Actor const&, class Block const&, bool) const;
    /*106*/ virtual class Block const* tryGetInfested(class Block const&) const;
    /*107*/ virtual class Block const* tryGetUninfested(class Block const&) const;
    /*108*/ virtual void onRemove(class BlockSource&, class BlockPos const&) const;
    /*109*/ virtual void onExploded(class BlockSource&, class BlockPos const&, class Actor*) const;
    /*110*/ virtual void onStandOn(class Actor&, class BlockPos const&) const;
    /*111*/ virtual void onStepOn(class Actor&, class BlockPos const&) const;
    /*112*/ virtual void __unk_vfn_29();
    /*113*/ virtual void __unk_vfn_30();
    /*114*/ virtual void onPlace(class BlockSource&, class BlockPos const&) const;
    /*115*/ virtual void tick(class BlockSource&, class BlockPos const&, class Random&) const;
    /*116*/ virtual void __unk_vfn_31();
    /*117*/ virtual class HitResult clip(class BlockSource const&, class BlockPos const&, class Vec3 const&, class Vec3 const&, bool) const;
    /*118*/ virtual bool use(class Player&, class BlockPos const&, unsigned char) const;
    /*119*/ virtual bool canSurvive(class BlockSource&, class BlockPos const&) const;
    /*120*/ virtual int getExtraRenderLayers() const;
    /*121*/ virtual class mce::Color getMapColor(class BlockSource&, class BlockPos const&) const;
    /*122*/ virtual void __unk_vfn_32();
    /*123*/ virtual void __unk_vfn_33();
    /*
    inline bool canBeSilkTouched() const{
        bool (PistonArmBlock::*rv)() const;
        *((void**)&rv) = dlsym("?canBeSilkTouched@PistonArmBlock@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI PistonArmBlock(std::string const&, int, enum PistonBlock::Type);

protected:

private:
    MCAPI void _getCollisions(class AABB&, class AABB&, class AABB&, unsigned char) const;

};