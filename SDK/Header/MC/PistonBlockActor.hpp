// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PistonBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PISTONBLOCKACTOR
public:
    class PistonBlockActor& operator=(class PistonBlockActor const&) = delete;
    PistonBlockActor(class PistonBlockActor const&) = delete;
    PistonBlockActor() = delete;
#endif

public:
    /*0*/ virtual ~PistonBlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*3*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*4*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*5*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*6*/ virtual void tick(class BlockSource&);
    /*7*/ virtual void onChanged(class BlockSource&);
    /*8*/ virtual void onPlace(class BlockSource&);
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void onRemoved(class BlockSource&);
    /*11*/ virtual void triggerEvent(int, int);
    /*12*/ virtual void clearCache();
    /*13*/ virtual void __unk_vfn_1();
    /*14*/ virtual float getShadowRadius(class BlockSource&) const;
    /*15*/ virtual bool hasAlphaLayer() const;
    /*16*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*17*/ virtual std::string const& getCustomName() const;
    /*18*/ virtual std::string getName() const;
    /*19*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*20*/ virtual int getRepairCost() const;
    /*21*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*22*/ virtual void __unk_vfn_2();
    /*23*/ virtual void __unk_vfn_3();
    /*24*/ virtual float getDeletionDelayTimeSeconds() const;
    /*25*/ virtual void __unk_vfn_4();
    /*26*/ virtual void __unk_vfn_5();
    /*27*/ virtual void __unk_vfn_6();
    /*28*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*29*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*30*/ virtual bool _playerCanUpdate(class Player const&) const;
    MCAPI PistonBlockActor(class BlockPos const&, bool);
    MCAPI std::vector<class BlockPos> const& getAttachedBlocks() const;
    MCAPI class Block const* getCorrectArmBlock() const;
    MCAPI class BlockPos const& getFacingDir(class BlockSource const&) const;
    MCAPI float getProgress(float) const;
    MCAPI bool isExpanded() const;
    MCAPI bool isExpanding() const;
    MCAPI bool isMoving() const;
    MCAPI bool isRetracted() const;
    MCAPI bool isRetracting() const;
    MCAPI void setShouldVerifyArmType(bool);

protected:

private:
    MCAPI bool _attachedBlockWalker(class BlockSource&, class BlockPos const&, unsigned char, unsigned char);
    MCAPI bool _checkAttachedBlocks(class BlockSource&);
    MCAPI void _checkInceptionAchievement(class BlockActor&, class BlockSource&, class BlockPos const&);
    MCAPI bool _handleSlimeConnections(class BlockSource&, class BlockPos const&, unsigned char, unsigned char);
    MCAPI bool _hasBlockAttached(class BlockPos const&);
    MCAPI void _moveCollidedEntities(class BlockSource&);
    MCAPI void _moveCollidedEntitiesHelper(class BlockSource&, class AABB const&, class BlockPos const&, class Actor*, unsigned int);
    MCAPI void _sortAttachedBlocks(class BlockSource&);
    MCAPI void _spawnBlocks(class BlockSource&);
    MCAPI void _spawnMovingBlocks(class BlockSource&);
    MCAPI static float const ARM_ANIMATION_SPEED;

};