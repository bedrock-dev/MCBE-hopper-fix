// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ChunkSource.hpp"
#include "ConsoleChunkBlender.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class DBChunkStorage : public ChunkSource {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DBCHUNKSTORAGE
public:
    class DBChunkStorage& operator=(class DBChunkStorage const&) = delete;
    DBChunkStorage(class DBChunkStorage const&) = delete;
    DBChunkStorage() = delete;
#endif

public:
    /*0*/ virtual ~DBChunkStorage();
    /*1*/ virtual void shutdown();
    /*2*/ virtual bool isShutdownDone();
    /*3*/ virtual class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const&);
    /*4*/ virtual class std::shared_ptr<class LevelChunk> getRandomChunk(class Random&);
    /*5*/ virtual bool isChunkKnown(class ChunkPos const&);
    /*6*/ virtual bool postProcess(class ChunkViewSource&);
    /*7*/ virtual void checkAndReplaceChunk(class ChunkViewSource&, class LevelChunk&);
    /*8*/ virtual void loadChunk(class LevelChunk&, bool);
    /*9*/ virtual bool saveLiveChunk(class LevelChunk&);
    /*10*/ virtual void hintDiscardBatchBegin();
    /*11*/ virtual void hintDiscardBatchEnd();
    /*12*/ virtual void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
    /*13*/ virtual void flushPendingWrites();
    /*14*/ virtual bool isWithinWorldLimit(class ChunkPos const&) const;
    /*15*/ virtual class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const* getChunkMap();
    /*16*/ virtual void clearDeletedEntities();
    /*17*/ virtual bool canCreateViews() const;
    /*18*/ virtual class LevelChunkBlendingAttenuator getHeightAttenuatorForLevelChunk(class ChunkPos const&, class BiomeRegistry const&);
    MCAPI DBChunkStorage(std::unique_ptr<class ChunkSource>, class DBStorage&, class Scheduler&);
    MCAPI static enum ConsoleChunkBlender::BlenderMode _getBlenderMode(class LevelChunk const&, class Experiments const&);

protected:

private:
    MCAPI bool _checkSubChunksUseAbsoluteIndices(class DBChunkStorageKey, class LevelChunk const&, bool&) const;
    MCAPI bool _hasChunk(class DBChunkStorageKey const&);
    MCAPI bool _hasChunkUncached(class DBChunkStorageKey const&);
    MCAPI void _loadAndBlendFromDB(class LevelChunk&, class LevelChunk&, class ChunkViewSource&);
    MCAPI bool _loadChunkFromDB(class LevelChunk&, class LevelChunk&, class ChunkViewSource&);
    MCAPI void _serializeChunk(class LevelChunk&, class LevelStorageWriteBatch&, bool);
    MCAPI void _writeBatch();
    MCAPI static class Bedrock::Threading::ThreadLocalObject<class LevelStorageWriteBatch, class std::allocator<class LevelStorageWriteBatch> > threadBatch;
    MCAPI static class Bedrock::Threading::ThreadLocalObject<std::string, class std::allocator<std::string > > threadBuffer;

};