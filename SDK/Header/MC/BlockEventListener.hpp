// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class BlockEventListener {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCKEVENTLISTENER
public:
    class BlockEventListener& operator=(class BlockEventListener const&) = delete;
    BlockEventListener(class BlockEventListener const&) = delete;
    BlockEventListener() = delete;
#endif

public:
    /*0*/ virtual ~BlockEventListener();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual enum EventResult onBlockDestroyedByPlayer(class Player&, std::string, class BlockPos const&);
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual void __unk_vfn_3();
    /*6*/ virtual void __unk_vfn_4();
    /*7*/ virtual enum EventResult onBlockExploded(class BlockPos const&, class Block const&, class Actor*);
    /*8*/ virtual void __unk_vfn_5();
    /*9*/ virtual void __unk_vfn_6();
    /*10*/ virtual void __unk_vfn_7();
    /*11*/ virtual void __unk_vfn_8();
    /*12*/ virtual void __unk_vfn_9();
    /*13*/ virtual enum EventResult onPistonActionEvent(struct PistonActionEvent const&);
    /*14*/ virtual void __unk_vfn_10();
    /*15*/ virtual void __unk_vfn_11();
    /*16*/ virtual void __unk_vfn_12();
    /*17*/ virtual enum EventResult onExplosionStartedEvent(struct ExplosionStartedEvent const&);
    /*
    inline  ~BlockEventListener(){
         (BlockEventListener::*rv)();
        *((void**)&rv) = dlsym("??1BlockEventListener@@UEAA@XZ");
        return (this->*rv)();
    }
    inline enum EventResult onCraftUISetResultName(struct CraftUISetResultNameEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct CraftUISetResultNameEvent const&);
        *((void**)&rv) = dlsym("?onCraftUISetResultName@BlockEventListener@@UEAA?AW4EventResult@@AEBUCraftUISetResultNameEvent@@@Z");
        return (this->*rv)(std::forward<struct CraftUISetResultNameEvent const&>(a0));
    }
    inline enum EventResult onBlockDestructionStopped(class Player& a0, class BlockPos const& a1, int a2){
        enum EventResult (BlockEventListener::*rv)(class Player&, class BlockPos const&, int);
        *((void**)&rv) = dlsym("?onBlockDestructionStopped@BlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1), std::forward<int>(a2));
    }
    inline enum EventResult onBlockInteractedWith(class Player& a0, class BlockPos const& a1){
        enum EventResult (BlockEventListener::*rv)(class Player&, class BlockPos const&);
        *((void**)&rv) = dlsym("?onBlockInteractedWith@BlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline enum EventResult onBlockDestructionStarted(class Player& a0, class BlockPos const& a1){
        enum EventResult (BlockEventListener::*rv)(class Player&, class BlockPos const&);
        *((void**)&rv) = dlsym("?onBlockDestructionStarted@BlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline enum EventResult onChestBlockTryPaired(struct ChestBlockTryPairEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct ChestBlockTryPairEvent const&);
        *((void**)&rv) = dlsym("?onChestBlockTryPaired@BlockEventListener@@UEAA?AW4EventResult@@AEBUChestBlockTryPairEvent@@@Z");
        return (this->*rv)(std::forward<struct ChestBlockTryPairEvent const&>(a0));
    }
    inline enum EventResult onUnknownBlockReceived(class Level& a0, struct NewBlockID const& a1, unsigned short a2){
        enum EventResult (BlockEventListener::*rv)(class Level&, struct NewBlockID const&, unsigned short);
        *((void**)&rv) = dlsym("?onUnknownBlockReceived@BlockEventListener@@UEAA?AW4EventResult@@AEAVLevel@@AEBUNewBlockID@@G@Z");
        return (this->*rv)(std::forward<class Level&>(a0), std::forward<struct NewBlockID const&>(a1), std::forward<unsigned short>(a2));
    }
    inline enum EventResult onPreBlockPatterned(struct BlockPatternEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct BlockPatternEvent const&);
        *((void**)&rv) = dlsym("?onPreBlockPatterned@BlockEventListener@@UEAA?AW4EventResult@@AEBUBlockPatternEvent@@@Z");
        return (this->*rv)(std::forward<struct BlockPatternEvent const&>(a0));
    }
    inline enum EventResult onActorInsideBlock(struct ActorInsideBlockEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct ActorInsideBlockEvent const&);
        *((void**)&rv) = dlsym("?onActorInsideBlock@BlockEventListener@@UEAA?AW4EventResult@@AEBUActorInsideBlockEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorInsideBlockEvent const&>(a0));
    }
    inline enum EventResult onPostBlockPatterned(struct BlockPatternEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct BlockPatternEvent const&);
        *((void**)&rv) = dlsym("?onPostBlockPatterned@BlockEventListener@@UEAA?AW4EventResult@@AEBUBlockPatternEvent@@@Z");
        return (this->*rv)(std::forward<struct BlockPatternEvent const&>(a0));
    }
    inline enum EventResult onActorStandOnBlock(struct ActorStandOnBlockEvent const& a0){
        enum EventResult (BlockEventListener::*rv)(struct ActorStandOnBlockEvent const&);
        *((void**)&rv) = dlsym("?onActorStandOnBlock@BlockEventListener@@UEAA?AW4EventResult@@AEBUActorStandOnBlockEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorStandOnBlockEvent const&>(a0));
    }
    inline enum EventResult onBlockModified(class BlockPos const& a0, class Block const& a1, class Block const& a2){
        enum EventResult (BlockEventListener::*rv)(class BlockPos const&, class Block const&, class Block const&);
        *((void**)&rv) = dlsym("?onBlockModified@BlockEventListener@@UEAA?AW4EventResult@@AEBVBlockPos@@AEBVBlock@@1@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class Block const&>(a1), std::forward<class Block const&>(a2));
    }
    inline enum EventResult onBlockPlacedByPlayer(class Player& a0, class Block const& a1, class BlockPos const& a2, bool a3){
        enum EventResult (BlockEventListener::*rv)(class Player&, class Block const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?onBlockPlacedByPlayer@BlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlock@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class Block const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<bool>(a3));
    }
    inline enum EventResult onBlockMovedByPiston(class BlockPos const& a0, class BlockPos const& a1, enum PistonState a2){
        enum EventResult (BlockEventListener::*rv)(class BlockPos const&, class BlockPos const&, enum PistonState);
        *((void**)&rv) = dlsym("?onBlockMovedByPiston@BlockEventListener@@UEAA?AW4EventResult@@AEBVBlockPos@@0W4PistonState@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<enum PistonState>(a2));
    }
    */

protected:

private:

};