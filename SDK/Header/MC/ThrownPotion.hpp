// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Throwable.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ThrownPotion : public Throwable {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_THROWNPOTION
public:
    class ThrownPotion& operator=(class ThrownPotion const&) = delete;
    ThrownPotion(class ThrownPotion const&) = delete;
    ThrownPotion() = delete;
#endif

public:
    /*0*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*2*/ virtual ~ThrownPotion();
    /*3*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual float getInterpolatedHeadRot(float) const;
    /*6*/ virtual float getInterpolatedBodyYaw(float) const;
    /*7*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual float getRidingHeight();
    /*10*/ virtual void __unk_vfn_2();
    /*11*/ virtual void __unk_vfn_3();
    /*12*/ virtual float getCameraOffset() const;
    /*13*/ virtual float getShadowHeightOffs();
    /*14*/ virtual void __unk_vfn_4();
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual void playerTouch(class Player&);
    /*17*/ virtual bool isPickable();
    /*18*/ virtual void __unk_vfn_6();
    /*19*/ virtual bool isSleeping() const;
    /*20*/ virtual void setSleeping(bool);
    /*21*/ virtual void __unk_vfn_7();
    /*22*/ virtual bool isBlocking() const;
    /*23*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*24*/ virtual void __unk_vfn_8();
    /*25*/ virtual bool isSurfaceMob() const;
    /*26*/ virtual void __unk_vfn_9();
    /*27*/ virtual void __unk_vfn_10();
    /*28*/ virtual void __unk_vfn_11();
    /*29*/ virtual class Actor* findAttackTarget();
    /*30*/ virtual bool isValidTarget(class Actor*) const;
    /*31*/ virtual void adjustDamageAmount(int&) const;
    /*32*/ virtual void onTame();
    /*33*/ virtual void onFailedTame();
    /*34*/ virtual bool isJumping() const;
    /*35*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*36*/ virtual void animateHurt();
    /*37*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*38*/ virtual float getPickRadius();
    /*39*/ virtual void awardKillScore(class Actor&, int);
    /*40*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*41*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*42*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*43*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const&);
    /*44*/ virtual class HashedString const& queryEntityRenderer() const;
    /*45*/ virtual bool canFreeze() const;
    /*46*/ virtual int getPortalWaitTime() const;
    /*47*/ virtual bool canChangeDimensions() const;
    /*48*/ virtual void __unk_vfn_12();
    /*49*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*50*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*51*/ virtual bool canBePulledIntoVehicle() const;
    /*52*/ virtual bool inCaravan() const;
    /*53*/ virtual void __unk_vfn_13();
    /*54*/ virtual bool canSynchronizeNewEntity() const;
    /*55*/ virtual void buildDebugInfo(std::string&) const;
    /*56*/ virtual int getDeathTime() const;
    /*57*/ virtual void swing();
    /*58*/ virtual void __unk_vfn_14();
    /*59*/ virtual void __unk_vfn_15();
    /*60*/ virtual float getYHeadRot() const;
    /*61*/ virtual bool isWorldBuilder() const;
    /*62*/ virtual void __unk_vfn_16();
    /*63*/ virtual bool isAdventure() const;
    /*64*/ virtual bool canDestroyBlock(class Block const&) const;
    /*65*/ virtual void setAuxValue(int);
    /*66*/ virtual void stopSpinAttack();
    /*67*/ virtual void __unk_vfn_17();
    /*68*/ virtual void __unk_vfn_18();
    /*69*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*70*/ virtual void __unk_vfn_19();
    /*71*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*72*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*73*/ virtual void __unk_vfn_20();
    /*74*/ virtual void _onSizeUpdated();
    /*75*/ virtual void __unk_vfn_21();
    /*76*/ virtual void __unk_vfn_22();
    /*77*/ virtual float getThrowUpAngleOffset();
    /*78*/ virtual enum ParticleType getParticleType();
    MCAPI ThrownPotion(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI short getPotionId() const;
    MCAPI void setLinger(bool);
    MCAPI static float const SPLASH_RANGE;

protected:

private:

};