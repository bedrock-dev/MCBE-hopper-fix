// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptActorGameplayHandler {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTACTORGAMEPLAYHANDLER
public:
    class ScriptActorGameplayHandler& operator=(class ScriptActorGameplayHandler const&) = delete;
    ScriptActorGameplayHandler(class ScriptActorGameplayHandler const&) = delete;
    ScriptActorGameplayHandler() = delete;
#endif

public:
    /*0*/ virtual ~ScriptActorGameplayHandler();
    /*
    inline enum HandlerResult handleMountTaming(struct MountTamingEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct MountTamingEvent const&);
        *((void**)&rv) = dlsym("?handleMountTaming@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUMountTamingEvent@@@Z");
        return (this->*rv)(std::forward<struct MountTamingEvent const&>(a0));
    }
    inline enum HandlerResult handleKnockBack(struct KnockBackEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct KnockBackEvent const&);
        *((void**)&rv) = dlsym("?handleKnockBack@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUKnockBackEvent@@@Z");
        return (this->*rv)(std::forward<struct KnockBackEvent const&>(a0));
    }
    inline enum HandlerResult handleActorAnimationChanged(struct ActorAnimationChangedEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorAnimationChangedEvent const&);
        *((void**)&rv) = dlsym("?handleActorAnimationChanged@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorAnimationChangedEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorAnimationChangedEvent const&>(a0));
    }
    inline enum HandlerResult handleActorRemoved(struct ActorRemovedEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorRemovedEvent const&);
        *((void**)&rv) = dlsym("?handleActorRemoved@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorRemovedEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorRemovedEvent const&>(a0));
    }
    inline enum HandlerResult handleActorAddEffect(struct ActorAddEffectEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorAddEffectEvent const&);
        *((void**)&rv) = dlsym("?handleActorAddEffect@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorAddEffectEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorAddEffectEvent const&>(a0));
    }
    inline enum HandlerResult handleActorDefinitionEventTriggered(struct ActorDefinitionEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorDefinitionEvent const&);
        *((void**)&rv) = dlsym("?handleActorDefinitionEventTriggered@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorDefinitionEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionEvent const&>(a0));
    }
    inline enum HandlerResult handleActorKilled(struct ActorKilledEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorKilledEvent const&);
        *((void**)&rv) = dlsym("?handleActorKilled@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorKilledEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorKilledEvent const&>(a0));
    }
    inline enum HandlerResult handleActorRemoveEffect(struct ActorRemoveEffectEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorRemoveEffectEvent const&);
        *((void**)&rv) = dlsym("?handleActorRemoveEffect@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorRemoveEffectEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorRemoveEffectEvent const&>(a0));
    }
    inline enum HandlerResult handleActorUseItem(struct ActorUseItemEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorUseItemEvent const&);
        *((void**)&rv) = dlsym("?handleActorUseItem@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorUseItemEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorUseItemEvent const&>(a0));
    }
    inline enum HandlerResult handleActorAcquiredItem(struct ActorAcquiredItemEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorAcquiredItemEvent const&);
        *((void**)&rv) = dlsym("?handleActorAcquiredItem@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorAcquiredItemEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorAcquiredItemEvent const&>(a0));
    }
    inline enum HandlerResult handleActorHurt(struct ActorHurtEvent const& a0){
        enum HandlerResult (ScriptActorGameplayHandler::*rv)(struct ActorHurtEvent const&);
        *((void**)&rv) = dlsym("?handleActorHurt@ScriptActorGameplayHandler@@UEAA?AW4HandlerResult@@AEBUActorHurtEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorHurtEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<enum CoordinatorResult> handleActorGriefingBlock(struct ActorGriefingBlockEvent const& a0){
        struct GameplayHandlerResult<enum CoordinatorResult> (ScriptActorGameplayHandler::*rv)(struct ActorGriefingBlockEvent const&);
        *((void**)&rv) = dlsym("?handleActorGriefingBlock@ScriptActorGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUActorGriefingBlockEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorGriefingBlockEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<enum CoordinatorResult> handleProjectileHit(struct ProjectileHitEvent const& a0){
        struct GameplayHandlerResult<enum CoordinatorResult> (ScriptActorGameplayHandler::*rv)(struct ProjectileHitEvent const&);
        *((void**)&rv) = dlsym("?handleProjectileHit@ScriptActorGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUProjectileHitEvent@@@Z");
        return (this->*rv)(std::forward<struct ProjectileHitEvent const&>(a0));
    }
    */

protected:

private:

};