// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class EnderDragon : public Monster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENDERDRAGON
public:
    class EnderDragon& operator=(class EnderDragon const&) = delete;
    EnderDragon(class EnderDragon const&) = delete;
    EnderDragon() = delete;
#endif

public:
    /*0*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual ~EnderDragon();
    /*2*/ virtual void remove();
    /*3*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*6*/ virtual void __unk_vfn_1();
    /*7*/ virtual float getRidingHeight();
    /*8*/ virtual void __unk_vfn_2();
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual float getCameraOffset() const;
    /*11*/ virtual float getShadowRadius() const;
    /*12*/ virtual class Vec3 getHeadLookVector(float) const;
    /*13*/ virtual void __unk_vfn_4();
    /*14*/ virtual void __unk_vfn_5();
    /*15*/ virtual void playerTouch(class Player&);
    /*16*/ virtual bool isImmobile() const;
    /*17*/ virtual void __unk_vfn_6();
    /*18*/ virtual void __unk_vfn_7();
    /*19*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*20*/ virtual void __unk_vfn_8();
    /*21*/ virtual void __unk_vfn_9();
    /*22*/ virtual void __unk_vfn_10();
    /*23*/ virtual void __unk_vfn_11();
    /*24*/ virtual bool isValidTarget(class Actor*) const;
    /*25*/ virtual void adjustDamageAmount(int&) const;
    /*26*/ virtual void setSitting(bool);
    /*27*/ virtual void onTame();
    /*28*/ virtual void onFailedTame();
    /*29*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*30*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*31*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*32*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*33*/ virtual float getPickRadius();
    /*34*/ virtual void awardKillScore(class Actor&, int);
    /*35*/ virtual class HashedString const& queryEntityRenderer() const;
    /*36*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*37*/ virtual int getPortalWaitTime() const;
    /*38*/ virtual bool canChangeDimensions() const;
    /*39*/ virtual void __unk_vfn_12();
    /*40*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*41*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*42*/ virtual bool canBePulledIntoVehicle() const;
    /*43*/ virtual void __unk_vfn_13();
    /*44*/ virtual bool canSynchronizeNewEntity() const;
    /*45*/ virtual bool canBeAffected(class MobEffectInstance const&) const;
    /*46*/ virtual void __unk_vfn_14();
    /*47*/ virtual void __unk_vfn_15();
    /*48*/ virtual bool isWorldBuilder() const;
    /*49*/ virtual void __unk_vfn_16();
    /*50*/ virtual bool isAdventure() const;
    /*51*/ virtual bool canDestroyBlock(class Block const&) const;
    /*52*/ virtual void setAuxValue(int);
    /*53*/ virtual void stopSpinAttack();
    /*54*/ virtual void __unk_vfn_17();
    /*55*/ virtual void __unk_vfn_18();
    /*56*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*57*/ virtual void __unk_vfn_19();
    /*58*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*59*/ virtual void __unk_vfn_20();
    /*60*/ virtual void _onSizeUpdated();
    /*61*/ virtual void __unk_vfn_21();
    /*62*/ virtual void spawnAnim();
    /*63*/ virtual void aiStep();
    /*64*/ virtual bool checkSpawnRules(bool);
    /*65*/ virtual int getItemUseDuration() const;
    /*66*/ virtual float getItemUseStartupProgress() const;
    /*67*/ virtual float getItemUseIntervalProgress() const;
    /*68*/ virtual void __unk_vfn_22();
    /*69*/ virtual bool isAlliedTo(class Mob*);
    /*70*/ virtual void __unk_vfn_23();
    /*71*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*72*/ virtual void onBorn(class Actor&, class Actor&);
    /*73*/ virtual int getAttackTime();
    /*74*/ virtual void __unk_vfn_24();
    /*75*/ virtual void _serverAiMobStep();
    /*76*/ virtual void tickDeath();
    /*77*/ virtual void __unk_vfn_25();
    /*
    inline bool isFishable() const{
        bool (EnderDragon::*rv)() const;
        *((void**)&rv) = dlsym("?isFishable@EnderDragon@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canExistInPeaceful() const{
        bool (EnderDragon::*rv)() const;
        *((void**)&rv) = dlsym("?canExistInPeaceful@EnderDragon@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI EnderDragon(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI void dieNaturally();
    MCAPI int findClosestNode(class Vec3 const&);
    MCAPI int findClosestNode();
    MCAPI std::unique_ptr<class Path> findPath(int, int, class PathfinderNode*);
    MCAPI int getFlameCount() const;
    MCAPI float getFlapTime() const;
    MCAPI class BlockPos getHeadPos() const;
    MCAPI std::vector<float> const getLatencyPos(int, float) const;
    MCAPI int getNumCrystalsAlive();
    MCAPI class Vec3 getTargetPos() const;
    MCAPI void incrementFlameCount();
    MCAPI void onCrystalDestroyed(class EnderCrystal const&, class BlockPos, class ActorDamageSource const&);
    MCAPI void resetFlameCount();
    MCAPI void setDragonKilledCallback(class std::function<void (class EnderDragon& )>);
    MCAPI void setHasDragonPreviouslyBeenKilled(bool);
    MCAPI void setNumCrystalsAlive(int);
    MCAPI void setTargetPos(class Vec3);
    MCAPI void setTurnSpeed(float);

protected:
    MCAPI bool _hurt(class AABB*, class ActorDamageSource const&, float);

private:
    MCAPI void checkCrystals();
    MCAPI bool checkWalls(class AABB);
    MCAPI void hurtEntities(class gsl::span<class gsl::not_null<class Actor* >, -1>) const;
    MCAPI void knockBack(class gsl::span<class gsl::not_null<class Actor* >, -1>) const;
    MCAPI std::unique_ptr<class Path> reconstructPath(class PathfinderNode&, class PathfinderNode&, enum PathCompletionType);
    MCAPI static int GROWL_INTERVAL_MAX;
    MCAPI static int GROWL_INTERVAL_MIN;
    MCAPI static int MAX_PATH_RADIUS;
    MCAPI static float SITTING_ALLOWED_DAMAGE_PERCENTAGE;

};