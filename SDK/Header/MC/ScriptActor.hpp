// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Scripting.hpp"
#include "ScriptObject.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptActor : public ScriptObject {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTACTOR
public:
    class ScriptActor& operator=(class ScriptActor const&) = delete;
    ScriptActor(class ScriptActor const&) = delete;
    ScriptActor() = delete;
#endif

public:
    /*0*/ virtual ~ScriptActor();
    /*1*/ virtual class Scripting::Result<std::string > getNameTag() const;
    /*2*/ virtual class Scripting::Result<void> setNameTag(std::string const&) const;
    /*3*/ virtual class Scripting::Result<bool> getSneaking() const;
    /*4*/ virtual class Scripting::Result<void> setSneaking(bool) const;
    /*
    inline  ~ScriptActor(){
         (ScriptActor::*rv)();
        *((void**)&rv) = dlsym("??1ScriptActor@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ScriptActor(class ScriptActor&&);
    MCAPI ScriptActor(class Actor const&, class Scripting::WeakLifetimeScope const&);
    MCAPI class Scripting::Result<void> addEffect(class ScriptEffectType const&, int, int);
    MCAPI class Scripting::WeakTypedObjectHandle<class ScriptActorComponent> getComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string >, struct std::equal_to<std::string >, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory> > > > const&, std::string const&);
    MCAPI std::vector<class Scripting::WeakTypedObjectHandle<class ScriptActorComponent>> getComponents(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string >, struct std::equal_to<std::string >, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory> > > > const&);
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptMobEffectInstance> > getEffect(class ScriptEffectType const&);
    MCAPI class Scripting::Result<std::string > getId() const;
    MCAPI class Scripting::Result<class Vec3> getLocation() const;
    MCAPI class Scripting::Result<class Vec3> getVelocity() const;
    MCAPI class WeakRefT<struct EntityRefTraits> getWeakEntity() const;
    MCAPI bool hasComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string >, struct std::equal_to<std::string >, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory> > > > const&, std::string const&);
    MCAPI class Scripting::Result<void> kill() const;
    MCAPI class ScriptActor& operator=(class ScriptActor&&);
    MCAPI class Scripting::Result<void> triggerEvent(std::string const&) const;
    MCAPI class Actor* tryGetActor() const;
    MCAPI static void destroyHandle(struct ActorUniqueID const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class WeakEntityRef const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class Actor const*, class Scripting::WeakLifetimeScope const&);

protected:

private:

};