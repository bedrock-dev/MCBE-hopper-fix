// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class VillagerBase : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_VILLAGERBASE
public:
    class VillagerBase& operator=(class VillagerBase const&) = delete;
    VillagerBase(class VillagerBase const&) = delete;
    VillagerBase() = delete;
#endif

public:
    /*0*/ virtual void reloadComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual ~VillagerBase();
    /*2*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*5*/ virtual void __unk_vfn_1();
    /*6*/ virtual float getRidingHeight();
    /*7*/ virtual void __unk_vfn_2();
    /*8*/ virtual void __unk_vfn_3();
    /*9*/ virtual float getCameraOffset() const;
    /*10*/ virtual void __unk_vfn_4();
    /*11*/ virtual void __unk_vfn_5();
    /*12*/ virtual void playerTouch(class Player&);
    /*13*/ virtual void __unk_vfn_6();
    /*14*/ virtual void __unk_vfn_7();
    /*15*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*16*/ virtual void __unk_vfn_8();
    /*17*/ virtual void __unk_vfn_9();
    /*18*/ virtual void __unk_vfn_10();
    /*19*/ virtual void __unk_vfn_11();
    /*20*/ virtual class Actor* findAttackTarget();
    /*21*/ virtual bool isValidTarget(class Actor*) const;
    /*22*/ virtual void adjustDamageAmount(int&) const;
    /*23*/ virtual void onTame();
    /*24*/ virtual void onFailedTame();
    /*25*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*26*/ virtual void onLightningHit();
    /*27*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*28*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*29*/ virtual float getPickRadius();
    /*30*/ virtual void awardKillScore(class Actor&, int);
    /*31*/ virtual class HashedString const& queryEntityRenderer() const;
    /*32*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*33*/ virtual int getPortalWaitTime() const;
    /*34*/ virtual bool canChangeDimensions() const;
    /*35*/ virtual void __unk_vfn_12();
    /*36*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*37*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*38*/ virtual bool canBePulledIntoVehicle() const;
    /*39*/ virtual void __unk_vfn_13();
    /*40*/ virtual bool canSynchronizeNewEntity() const;
    /*41*/ virtual void __unk_vfn_14();
    /*42*/ virtual void __unk_vfn_15();
    /*43*/ virtual bool isWorldBuilder() const;
    /*44*/ virtual void __unk_vfn_16();
    /*45*/ virtual bool isAdventure() const;
    /*46*/ virtual bool canDestroyBlock(class Block const&) const;
    /*47*/ virtual void setAuxValue(int);
    /*48*/ virtual void stopSpinAttack();
    /*49*/ virtual void __unk_vfn_17();
    /*50*/ virtual void __unk_vfn_18();
    /*51*/ virtual void __unk_vfn_19();
    /*52*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*53*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*54*/ virtual void __unk_vfn_20();
    /*55*/ virtual void _onSizeUpdated();
    /*56*/ virtual void __unk_vfn_21();
    /*57*/ virtual void spawnAnim();
    /*58*/ virtual int getItemUseDuration() const;
    /*59*/ virtual float getItemUseStartupProgress() const;
    /*60*/ virtual float getItemUseIntervalProgress() const;
    /*61*/ virtual void __unk_vfn_22();
    /*62*/ virtual bool isAlliedTo(class Mob*);
    /*63*/ virtual void __unk_vfn_23();
    /*64*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*65*/ virtual void onBorn(class Actor&, class Actor&);
    /*66*/ virtual int getAttackTime();
    /*67*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*68*/ virtual void __unk_vfn_24();
    /*69*/ virtual void _serverAiMobStep();
    /*70*/ virtual void __unk_vfn_25();
    /*
    inline void _serverAiMobStep(){
        void (VillagerBase::*rv)();
        *((void**)&rv) = dlsym("?_serverAiMobStep@VillagerBase@@MEAAXXZ");
        return (this->*rv)();
    }
    inline bool interactPreventDefault(){
        bool (VillagerBase::*rv)();
        *((void**)&rv) = dlsym("?interactPreventDefault@VillagerBase@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool useNewAi() const{
        bool (VillagerBase::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@VillagerBase@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI VillagerBase(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI void consumeLoveFood();
    MCAPI int getBreedingStackIndex() const;
    MCAPI bool isChasing() const;
    MCAPI bool isWillingToBreed(bool);
    MCAPI void setChasing(bool);
    MCAPI void setWillingToBreed(bool);
    MCAPI void stopGoals();

protected:

private:
    MCAPI void _addParticlesAroundSelf(enum ParticleType);

};