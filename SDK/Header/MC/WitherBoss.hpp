// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class WitherBoss : public Monster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WITHERBOSS
public:
    class WitherBoss& operator=(class WitherBoss const&) = delete;
    WitherBoss(class WitherBoss const&) = delete;
    WitherBoss() = delete;
#endif

public:
    /*0*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*2*/ virtual ~WitherBoss();
    /*3*/ virtual void remove();
    /*4*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*5*/ virtual void __unk_vfn_0();
    /*6*/ virtual class Vec3 getFiringPos() const;
    /*7*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual float getRidingHeight();
    /*10*/ virtual bool startRiding(class Actor&);
    /*11*/ virtual void __unk_vfn_2();
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual void setBlockMovementSlowdownMultiplier(class Vec3 const&);
    /*14*/ virtual float getCameraOffset() const;
    /*15*/ virtual void __unk_vfn_4();
    /*16*/ virtual void __unk_vfn_5();
    /*17*/ virtual void playerTouch(class Player&);
    /*18*/ virtual void __unk_vfn_6();
    /*19*/ virtual void __unk_vfn_7();
    /*20*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*21*/ virtual void __unk_vfn_8();
    /*22*/ virtual void __unk_vfn_9();
    /*23*/ virtual void __unk_vfn_10();
    /*24*/ virtual void __unk_vfn_11();
    /*25*/ virtual bool isValidTarget(class Actor*) const;
    /*26*/ virtual void adjustDamageAmount(int&) const;
    /*27*/ virtual void onTame();
    /*28*/ virtual void onFailedTame();
    /*29*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*30*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*31*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*32*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*33*/ virtual float getPickRadius();
    /*34*/ virtual void awardKillScore(class Actor&, int);
    /*35*/ virtual class HashedString const& queryEntityRenderer() const;
    /*36*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*37*/ virtual bool canFreeze() const;
    /*38*/ virtual int getPortalWaitTime() const;
    /*39*/ virtual bool canChangeDimensions() const;
    /*40*/ virtual void __unk_vfn_12();
    /*41*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*42*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*43*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*44*/ virtual bool canBePulledIntoVehicle() const;
    /*45*/ virtual void __unk_vfn_13();
    /*46*/ virtual bool canSynchronizeNewEntity() const;
    /*47*/ virtual bool canBeAffected(class MobEffectInstance const&) const;
    /*48*/ virtual bool canBeAffectedByArrow(class MobEffectInstance const&) const;
    /*49*/ virtual void __unk_vfn_14();
    /*50*/ virtual void __unk_vfn_15();
    /*51*/ virtual bool isWorldBuilder() const;
    /*52*/ virtual void __unk_vfn_16();
    /*53*/ virtual bool isAdventure() const;
    /*54*/ virtual bool canDestroyBlock(class Block const&) const;
    /*55*/ virtual void setAuxValue(int);
    /*56*/ virtual void stopSpinAttack();
    /*57*/ virtual void __unk_vfn_17();
    /*58*/ virtual void __unk_vfn_18();
    /*59*/ virtual void die(class ActorDamageSource const&);
    /*60*/ virtual void __unk_vfn_19();
    /*61*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*62*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*63*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*64*/ virtual void __unk_vfn_20();
    /*65*/ virtual void __unk_vfn_21();
    /*66*/ virtual void spawnAnim();
    /*67*/ virtual bool hurtEffects(class ActorDamageSource const&, int, bool, bool);
    /*68*/ virtual void aiStep();
    /*69*/ virtual bool checkSpawnRules(bool);
    /*70*/ virtual int getItemUseDuration() const;
    /*71*/ virtual float getItemUseStartupProgress() const;
    /*72*/ virtual float getItemUseIntervalProgress() const;
    /*73*/ virtual void __unk_vfn_22();
    /*74*/ virtual bool isAlliedTo(class Mob*);
    /*75*/ virtual void __unk_vfn_23();
    /*76*/ virtual int getArmorValue();
    /*77*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*78*/ virtual void onBorn(class Actor&, class Actor&);
    /*79*/ virtual int getAttackTime();
    /*80*/ virtual void __unk_vfn_24();
    /*81*/ virtual void newServerAiStep();
    /*82*/ virtual void _serverAiMobStep();
    /*83*/ virtual void __unk_vfn_25();
    /*
    inline void causeFallDamage(float a0, float a1, class ActorDamageSource a2){
        void (WitherBoss::*rv)(float, float, class ActorDamageSource);
        *((void**)&rv) = dlsym("?causeFallDamage@WitherBoss@@UEAAXMMVActorDamageSource@@@Z");
        return (this->*rv)(std::forward<float>(a0), std::forward<float>(a1), std::forward<class ActorDamageSource>(a2));
    }
    */
    MCAPI WitherBoss(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI void awardSpawnWitherAchievement() const;
    MCAPI class Vec3 getHeadPos(int) const;
    MCAPI class Vec2 getHeadRot(int);
    MCAPI int getInvulnerableTicks() const;
    MCAPI float getOverlayAlpha();
    MCAPI float getSwellAmount(float) const;
    MCAPI bool hasAerialAttack() const;
    MCAPI void removeSkeleton();
    MCAPI void setAerialAttack(bool);
    MCAPI void setAlternativeTarget(int, struct ActorUniqueID);
    MCAPI void setInvulnerableTicks(int);
    MCAPI void setIsPathing(bool);
    MCAPI void setShotDelay(int);
    MCAPI void setWantsToMove(bool);
    MCAPI bool wantsToMove();
    MCAPI static class mce::UUID const MAX_HEALTH_CAP_UUID;
    MCAPI static bool canDestroy(class Block const&);

protected:

private:
    MCAPI void _destroyBlocks(class Level&, class AABB const&, class BlockSource&, int);
    MCAPI void _performRangedAttack(int, class Actor&);
    MCAPI void _performRangedAttack(int, class Vec3 const&, bool);
    MCAPI bool canShoot();
    MCAPI static int const TIME_BEFORE_MOVING;

};