// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "TargetGoal.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class NearestAttackableTargetGoal : public TargetGoal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NEARESTATTACKABLETARGETGOAL
public:
    class NearestAttackableTargetGoal& operator=(class NearestAttackableTargetGoal const&) = delete;
    NearestAttackableTargetGoal(class NearestAttackableTargetGoal const&) = delete;
    NearestAttackableTargetGoal() = delete;
#endif

public:
    /*0*/ virtual ~NearestAttackableTargetGoal();
    /*1*/ virtual bool canUse();
    /*2*/ virtual bool canContinueToUse();
    /*3*/ virtual bool isTargetGoal() const;
    /*4*/ virtual void start();
    /*5*/ virtual void stop();
    /*6*/ virtual void appendDebugInfo(std::string&) const;
    /*7*/ virtual void __unk_vfn_0();
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual struct ActorUniqueID _findTarget(struct MobDescriptor const* *);
    /*
    inline  ~NearestAttackableTargetGoal(){
         (NearestAttackableTargetGoal::*rv)();
        *((void**)&rv) = dlsym("??1NearestAttackableTargetGoal@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI NearestAttackableTargetGoal(class Mob&);

protected:
    MCAPI bool _canStartSearching();
    MCAPI bool _isTargetVisible(class Mob const&, float, float) const;

private:
    MCAPI bool _selectTarget();

};