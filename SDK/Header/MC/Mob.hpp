// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class UserEntityIdentifierComponent;

#undef BEFORE_EXTRA

class Mob : public Actor {

#define AFTER_EXTRA
// Add Member There
public:
struct JumpPreventionResult {
    JumpPreventionResult() = delete;
    JumpPreventionResult(JumpPreventionResult const&) = delete;
    JumpPreventionResult(JumpPreventionResult const&&) = delete;
};

public:

    LIAPI bool refreshInventory();

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOB
public:
    class Mob& operator=(class Mob const&) = delete;
    Mob(class Mob const&) = delete;
    Mob() = delete;
#endif

public:
    /*0*/ virtual bool hasComponent(class HashedString const&) const;
    /*1*/ virtual void outOfWorld();
    /*2*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*3*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*4*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*5*/ virtual void _doInitialMove();
    /*6*/ virtual ~Mob();
    /*7*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*8*/ virtual void __unk_vfn_0();
    /*9*/ virtual float getInterpolatedBodyRot(float) const;
    /*10*/ virtual float getInterpolatedHeadRot(float) const;
    /*11*/ virtual float getInterpolatedBodyYaw(float) const;
    /*12*/ virtual float getYawSpeedInDegreesPerSecond() const;
    /*13*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*14*/ virtual void __unk_vfn_1();
    /*15*/ virtual void blockedByShield(class ActorDamageSource const&, class Actor&);
    /*16*/ virtual void teleportTo(class Vec3 const&, bool, int, int);
    /*17*/ virtual void normalTick();
    /*18*/ virtual void baseTick();
    /*19*/ virtual void vehicleTick();
    /*20*/ virtual float getRidingHeight();
    /*21*/ virtual bool startRiding(class Actor&);
    /*22*/ virtual void addPassenger(class Actor&);
    /*23*/ virtual void __unk_vfn_2();
    /*24*/ virtual void __unk_vfn_3();
    /*25*/ virtual float getCameraOffset() const;
    /*26*/ virtual void __unk_vfn_4();
    /*27*/ virtual void __unk_vfn_5();
    /*28*/ virtual void playerTouch(class Player&);
    /*29*/ virtual bool isImmobile() const;
    /*30*/ virtual bool isPickable();
    /*31*/ virtual void __unk_vfn_6();
    /*32*/ virtual bool isSleeping() const;
    /*33*/ virtual void setSleeping(bool);
    /*34*/ virtual void __unk_vfn_7();
    /*35*/ virtual bool isBlocking() const;
    /*36*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*37*/ virtual bool isAlive() const;
    /*38*/ virtual void __unk_vfn_8();
    /*39*/ virtual bool isSurfaceMob() const;
    /*40*/ virtual void __unk_vfn_9();
    /*41*/ virtual void __unk_vfn_10();
    /*42*/ virtual void __unk_vfn_11();
    /*43*/ virtual void setTarget(class Actor*);
    /*44*/ virtual class Actor* findAttackTarget();
    /*45*/ virtual bool isValidTarget(class Actor*) const;
    /*46*/ virtual bool attack(class Actor&, enum ActorDamageCause const&);
    /*47*/ virtual void adjustDamageAmount(int&) const;
    /*48*/ virtual void onTame();
    /*49*/ virtual void onFailedTame();
    /*50*/ virtual bool canPowerJump() const;
    /*51*/ virtual bool isJumping() const;
    /*52*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*53*/ virtual enum ActorDamageCause getBlockDamageCause(class Block const&) const;
    /*54*/ virtual void actuallyHurt(int, class ActorDamageSource const&, bool);
    /*55*/ virtual void animateHurt();
    /*56*/ virtual bool doFireHurt(int);
    /*57*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*58*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*59*/ virtual float getPickRadius();
    /*60*/ virtual void awardKillScore(class Actor&, int);
    /*61*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*62*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*63*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*64*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const&);
    /*65*/ virtual class HashedString const& queryEntityRenderer() const;
    /*66*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*67*/ virtual bool canFreeze() const;
    /*68*/ virtual int getPortalWaitTime() const;
    /*69*/ virtual bool canChangeDimensions() const;
    /*70*/ virtual void __unk_vfn_12();
    /*71*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*72*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*73*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*74*/ virtual bool canBePulledIntoVehicle() const;
    /*75*/ virtual bool inCaravan() const;
    /*76*/ virtual void __unk_vfn_13();
    /*77*/ virtual bool canSynchronizeNewEntity() const;
    /*78*/ virtual void stopRiding(bool, bool, bool);
    /*79*/ virtual void buildDebugInfo(std::string&) const;
    /*80*/ virtual int getDeathTime() const;
    /*81*/ virtual void swing();
    /*82*/ virtual void __unk_vfn_14();
    /*83*/ virtual void __unk_vfn_15();
    /*84*/ virtual float getYHeadRot() const;
    /*85*/ virtual bool isWorldBuilder() const;
    /*86*/ virtual void __unk_vfn_16();
    /*87*/ virtual bool isAdventure() const;
    /*88*/ virtual bool canDestroyBlock(class Block const&) const;
    /*89*/ virtual void setAuxValue(int);
    /*90*/ virtual void stopSpinAttack();
    /*91*/ virtual void __unk_vfn_17();
    /*92*/ virtual void __unk_vfn_18();
    /*93*/ virtual void kill();
    /*94*/ virtual void die(class ActorDamageSource const&);
    /*95*/ virtual bool shouldDropDeathLoot() const;
    /*96*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*97*/ virtual void __unk_vfn_19();
    /*98*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*99*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*100*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*101*/ virtual void _playStepSound(class BlockPos const&, class Block const&);
    /*102*/ virtual void __unk_vfn_20();
    /*103*/ virtual void _removePassenger(struct ActorUniqueID const&, bool, bool, bool);
    /*104*/ virtual void _onSizeUpdated();
    /*105*/ virtual void __unk_vfn_21();
    /*106*/ virtual void knockback(class Actor*, int, float, float, float, float, float);
    /*107*/ virtual void spawnAnim();
    /*108*/ virtual void setSprinting(bool);
    /*109*/ virtual enum LevelSoundEvent getHurtSound();
    /*110*/ virtual enum LevelSoundEvent getDeathSound();
    /*111*/ virtual struct TextureUVCoordinateSet const* getItemInHandIcon(class ItemStack const&, int);
    /*112*/ virtual float getSpeed() const;
    /*113*/ virtual void setSpeed(float);
    /*114*/ virtual float getJumpPower() const;
    /*115*/ virtual bool hurtEffects(class ActorDamageSource const&, int, bool, bool);
    /*116*/ virtual int getMeleeWeaponDamageBonus(class Mob*);
    /*117*/ virtual int getMeleeKnockbackBonus();
    /*118*/ virtual void travel(float, float, float);
    /*119*/ virtual void travel(struct IMobMovementProxy&, float, float, float) const;
    /*120*/ virtual void applyFinalFriction(float, bool);
    /*121*/ virtual void updateWalkAnim();
    /*122*/ virtual void aiStep();
    /*123*/ virtual void aiStep(struct IMobMovementProxy&) const;
    /*124*/ virtual void pushActors();
    /*125*/ virtual void lookAt(class Actor*, float, float);
    /*126*/ virtual bool isLookingAtAnEntity();
    /*127*/ virtual bool checkSpawnRules(bool);
    /*128*/ virtual bool checkSpawnObstruction() const;
    /*129*/ virtual float getAttackAnim(float);
    /*130*/ virtual int getItemUseDuration() const;
    /*131*/ virtual float getItemUseStartupProgress() const;
    /*132*/ virtual float getItemUseIntervalProgress() const;
    /*133*/ virtual int getItemUseIntervalAxis() const;
    /*134*/ virtual int getTimeAlongSwing() const;
    /*135*/ virtual void __unk_vfn_22();
    /*136*/ virtual float getMaxHeadXRot();
    /*137*/ virtual bool isAlliedTo(class Mob*);
    /*138*/ virtual bool doHurtTarget(class Actor*, enum ActorDamageCause const&);
    /*139*/ virtual void __unk_vfn_23();
    /*140*/ virtual void leaveCaravan();
    /*141*/ virtual void joinCaravan(class Mob*);
    /*142*/ virtual bool hasCaravanTail() const;
    /*143*/ virtual struct ActorUniqueID getCaravanHead() const;
    /*144*/ virtual int getArmorValue();
    /*145*/ virtual float getArmorCoverPercentage() const;
    /*146*/ virtual void hurtArmorSlots(class ActorDamageSource const&, int, class std::bitset<4> const&);
    /*147*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const&);
    /*148*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*149*/ virtual void sendArmor(class std::bitset<4> const&);
    /*150*/ virtual void containerChanged(int);
    /*151*/ virtual void updateEquipment();
    /*152*/ virtual int clearEquipment();
    /*153*/ virtual std::vector<int> getAllArmorID() const;
    /*154*/ virtual std::vector<class ItemStack const* > getAllHand() const;
    /*155*/ virtual std::vector<class ItemStack const* > getAllEquipment() const;
    /*156*/ virtual int getArmorTypeHash();
    /*157*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const&, int);
    /*158*/ virtual void dropEquipmentOnDeath();
    /*159*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*160*/ virtual void sendInventory(bool);
    /*161*/ virtual int getDamageAfterMagicAbsorb(class ActorDamageSource const&, int);
    /*162*/ virtual bool createAIGoals();
    /*163*/ virtual void onBorn(class Actor&, class Actor&);
    /*164*/ virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const&);
    /*165*/ virtual void setTransitioningSitting(bool);
    /*166*/ virtual void attackAnimation(class Actor*, float);
    /*167*/ virtual int getAttackTime();
    /*168*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*169*/ virtual bool canExistWhenDisallowMob() const;
    /*170*/ virtual void __unk_vfn_24();
    /*171*/ virtual void ascendLadder();
    /*172*/ virtual void ascendBlockByJumping();
    /*173*/ virtual void descendBlockByCrouching();
    /*174*/ virtual void dropContainer();
    /*175*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*176*/ virtual void jumpFromGround();
    /*177*/ virtual void jumpFromGround(struct IMobMovementProxy&) const;
    /*178*/ virtual void updateAi();
    /*179*/ virtual void newServerAiStep();
    /*180*/ virtual void _serverAiMobStep();
    /*181*/ virtual int getDamageAfterEnchantReduction(class ActorDamageSource const&, int);
    /*182*/ virtual int getDamageAfterArmorAbsorb(class ActorDamageSource const&, int);
    /*183*/ virtual void dropBags();
    /*184*/ virtual void tickDeath();
    /*185*/ virtual void updateGliding();
    /*186*/ virtual void __unk_vfn_25();
    /*187*/ virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const&, class Vec3 const&) const;
    /*
    inline bool canBeControlledByPassenger(){
        bool (Mob::*rv)();
        *((void**)&rv) = dlsym("?canBeControlledByPassenger@Mob@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void ate(){
        void (Mob::*rv)();
        *((void**)&rv) = dlsym("?ate@Mob@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void _serverAiMobStep(){
        void (Mob::*rv)();
        *((void**)&rv) = dlsym("?_serverAiMobStep@Mob@@MEAAXXZ");
        return (this->*rv)();
    }
    inline void renderDebugServerState(class Options const& a0){
        void (Mob::*rv)(class Options const&);
        *((void**)&rv) = dlsym("?renderDebugServerState@Mob@@UEAAXAEBVOptions@@@Z");
        return (this->*rv)(std::forward<class Options const&>(a0));
    }
    inline bool isShootable(){
        bool (Mob::*rv)();
        *((void**)&rv) = dlsym("?isShootable@Mob@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool _allowAscendingScaffolding() const{
        bool (Mob::*rv)() const;
        *((void**)&rv) = dlsym("?_allowAscendingScaffolding@Mob@@MEBA_NXZ");
        return (this->*rv)();
    }
    inline bool useNewAi() const{
        bool (Mob::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@Mob@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline float _getWalkTargetValue(class BlockPos const& a0){
        float (Mob::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?_getWalkTargetValue@Mob@@UEAAMAEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline  ~Mob(){
         (Mob::*rv)();
        *((void**)&rv) = dlsym("??1Mob@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Mob(class Level&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI Mob(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI void addSpeedModifier(class mce::UUID const&, std::string const&, float);
    MCAPI float calcMoveRelativeSpeed(enum TravelType);
    MCAPI bool checkTotemDeathProtection(class ActorDamageSource const&);
    MCAPI void createAI(std::vector<struct GoalDefinition>);
    MCAPI bool discardFriction() const;
    MCAPI void emitJumpPreventedEvent(class BlockPos const&);
    MCAPI void frostWalk();
    MCAPI class BlockPos getBoundOrigin() const;
    MCAPI int getCaravanSize() const;
    MCAPI int getEatCounter() const;
    MCAPI class Mob* getFirstCaravanHead();
    MCAPI float getFlightSpeed();
    MCAPI float getFrictionModifier() const;
    MCAPI int getGlidingTicks() const;
    MCAPI class ItemStack const& getItemSlot(enum EquipmentSlot) const;
    MCAPI float getJumpMultiplier();
    MCAPI struct Mob::JumpPreventionResult getJumpPrevention();
    MCAPI float getMovementComponentCurrentSpeed() const;
    MCAPI int getNoActionTime() const;
    MCAPI int getRollCounter() const;
    MCAPI enum MobSpawnMethod getSpawnMethod();
    MCAPI struct ActorUniqueID getTargetCaptain() const;
    MCAPI enum TravelType getTravelType();
    MCAPI float getYRotA() const;
    MCAPI float getZza() const;
    MCAPI bool hasBoundOrigin() const;
    MCAPI bool isEating() const;
    MCAPI bool isFrostWalking() const;
    MCAPI bool isGliding() const;
    MCAPI bool isLayingEgg() const;
    MCAPI bool isPregnant() const;
    MCAPI bool isRolling() const;
    MCAPI bool isSprinting() const;
    MCAPI bool isTransitioningSitting() const;
    MCAPI void onPlayerDimensionChanged(class Player*, class AutomaticID<class Dimension, int>);
    MCAPI void onPlayerJump(int);
    MCAPI void removeSpeedModifier(class mce::UUID const&);
    MCAPI void resetAttributes();
    MCAPI void resetNoActionTime();
    MCAPI void sendArmorDamageSlot(enum ArmorSlot);
    MCAPI void sendArmorSlot(enum ArmorSlot);
    MCAPI void setEatCounter(int);
    MCAPI void setEating(bool);
    MCAPI void setFlightSpeed(float);
    MCAPI void setFrictionModifier(float);
    MCAPI void setIsLayingEgg(bool);
    MCAPI void setIsPregnant(bool);
    MCAPI void setJumpVelRedux(bool);
    MCAPI void setJumping(bool);
    MCAPI void setMovementComponentCurrentSpeed(float);
    MCAPI void setNaturallySpawned(bool);
    MCAPI void setPassengerLockedBodyRot(float);
    MCAPI void setPassengerRotLimit(float);
    MCAPI void setRolling(bool);
    MCAPI void setSpawnMethod(enum MobSpawnMethod);
    MCAPI void setSpeedModifier(float);
    MCAPI void setSurfaceMob(bool);
    MCAPI void setTargetCaptain(struct ActorUniqueID);
    MCAPI void setXxa(float);
    MCAPI void setYHeadRot(float);
    MCAPI void setYRotA(float);
    MCAPI void setYya(float);
    MCAPI void setZza(float);
    MCAPI bool shouldApplyWaterGravity();
    MCAPI void snapToYBodyRot(float);
    MCAPI void snapToYHeadRot(float);
    MCAPI static int const ABSORPTION_FACTOR_MAX;
    MCAPI static int const ABSORPTION_FACTOR_MIN;
    MCAPI static int const ARMOR_DAMAGE_DIVISOR;
    MCAPI static float const ASCEND_BLOCK_BY_JUMPING_SPEED;
    MCAPI static float const DEFAULT_GRAVITY;
    MCAPI static float const FRICTION_CONSTANT;
    MCAPI static float const FRICTION_CONSTANT_MODIFIED;
    MCAPI static float const FRICTION_MODIFIER;
    MCAPI static float const GLIDING_FALL_RESET_DELTA;
    MCAPI static float const LADDER_CLIMB_SPEED;
    MCAPI static float const PLAYER_SWIMMING_SURFACE_OFFSET;
    MCAPI static int const REMOVE_PASSENGERS_DELAY;
    MCAPI static float const SLOW_FALL_GRAVITY;
    MCAPI static int const TOTAL_ROLL_STEPS;
    MCAPI static void _aiStep(struct IMobMovementProxy&);
    MCAPI static float _calcMoveRelativeSpeed(struct IMobMovementProxy&, enum TravelType);
    MCAPI static void _travel(struct IMobMovementProxy&, float, float, float);
    MCAPI static void _updateMobTravel(struct IMobMovementProxy&);
    MCAPI static float calculateJumpImpulse(struct IMobMovementProxy const&);
    MCAPI static struct Mob::JumpPreventionResult getJumpPrevention(struct IMobMovementProxy const&);
    MCAPI static enum TravelType getTravelType(struct IMobMovementProxy&);
    MCAPI static bool isImmobile(struct IActorMovementProxy const&);
    MCAPI static class Mob* tryGetFromEntity(class EntityContext&, bool);

protected:
    MCAPI void _doSprintParticleEffect();
    MCAPI void _endJump();
    MCAPI void _registerMobAttributes();
    MCAPI int getCurrentSwingDuration();
    MCAPI void processSoulSpeed();
    MCAPI std::unique_ptr<class ListTag> saveOffhand() const;
    MCAPI void tickEffects();
    MCAPI void updateAttackAnim();
    MCAPI bool updateGlidingDurability();
    MCAPI static int const MAX_INACTIVITY_TIMER;
    MCAPI static void _jumpFromGround(struct IMobMovementProxy&);

private:
    MCAPI bool _initHardCodedComponents();
    MCAPI void _updateSprintingState();
    MCAPI void _verifyAttributes();
    MCAPI static bool _tryApplyingLevitation(struct IMobMovementProxy const&, class Vec3&);

};