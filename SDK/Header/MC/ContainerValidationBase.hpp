// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ContainerValidationBase {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CONTAINERVALIDATIONBASE
public:
    class ContainerValidationBase& operator=(class ContainerValidationBase const&) = delete;
    ContainerValidationBase(class ContainerValidationBase const&) = delete;
    ContainerValidationBase() = delete;
#endif

public:
    /*
    inline bool isItemAllowedToAdd(class ItemStack const& a0) const{
        bool (ContainerValidationBase::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?isItemAllowedToAdd@ContainerValidationBase@@UEBA_NAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline bool isItemAllowedInSlot(class ContainerScreenContext const& a0, int a1, class ItemStackBase const& a2, int a3) const{
        bool (ContainerValidationBase::*rv)(class ContainerScreenContext const&, int, class ItemStackBase const&, int) const;
        *((void**)&rv) = dlsym("?isItemAllowedInSlot@ContainerValidationBase@@UEBA_NAEBVContainerScreenContext@@HAEBVItemStackBase@@H@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const&>(a0), std::forward<int>(a1), std::forward<class ItemStackBase const&>(a2), std::forward<int>(a3));
    }
    inline bool isItemAllowedToRemove(class ContainerScreenContext const& a0, class ItemStackBase const& a1) const{
        bool (ContainerValidationBase::*rv)(class ContainerScreenContext const&, class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?isItemAllowedToRemove@ContainerValidationBase@@UEBA_NAEBVContainerScreenContext@@AEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const&>(a0), std::forward<class ItemStackBase const&>(a1));
    }
    inline bool canDestroy(class ContainerScreenContext const& a0) const{
        bool (ContainerValidationBase::*rv)(class ContainerScreenContext const&) const;
        *((void**)&rv) = dlsym("?canDestroy@ContainerValidationBase@@UEBA_NAEBVContainerScreenContext@@@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const&>(a0));
    }
    inline bool canItemMoveToContainer(class ItemStackBase const& a0) const{
        bool (ContainerValidationBase::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?canItemMoveToContainer@ContainerValidationBase@@UEBA_NAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline int getAvailableSetCount(int a0, class ItemStackBase const& a1) const{
        int (ContainerValidationBase::*rv)(int, class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?getAvailableSetCount@ContainerValidationBase@@UEBAHHAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStackBase const&>(a1));
    }
    */

protected:

private:

};