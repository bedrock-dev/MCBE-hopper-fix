// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Container.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class CraftingContainer : public Container {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CRAFTINGCONTAINER
public:
    class CraftingContainer& operator=(class CraftingContainer const&) = delete;
    CraftingContainer(class CraftingContainer const&) = delete;
    CraftingContainer() = delete;
#endif

public:
    /*0*/ virtual ~CraftingContainer();
    /*1*/ virtual void init();
    /*2*/ virtual void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const& )>);
    /*3*/ virtual class ItemStack const& getItem(int) const;
    /*4*/ virtual void setItem(int, class ItemStack const&);
    /*5*/ virtual int getContainerSize() const;
    /*6*/ virtual int getMaxStackSize() const;
    /*7*/ virtual void startOpen(class Player&);
    /*8*/ virtual void stopOpen(class Player&);
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void __unk_vfn_1();
    /*11*/ virtual void setContainerChanged(int);
    /*12*/ virtual void __unk_vfn_2();
    /*
    inline  ~CraftingContainer(){
         (CraftingContainer::*rv)();
        *((void**)&rv) = dlsym("??1CraftingContainer@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI CraftingContainer(int, int);
    MCAPI class ItemStack const& getItem(int, int) const;

protected:

private:

};