// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ProducerComponent.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ComparatorCapacitor : public ProducerComponent {

#define AFTER_EXTRA
// Add Member There
public:
enum Mode;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPARATORCAPACITOR
public:
    class ComparatorCapacitor& operator=(class ComparatorCapacitor const&) = delete;
    ComparatorCapacitor(class ComparatorCapacitor const&) = delete;
#endif

public:
    /*0*/ virtual ~ComparatorCapacitor();
    /*1*/ virtual int getStrength() const;
    /*2*/ virtual int getDirection() const;
    /*3*/ virtual void setDirection(unsigned char);
    /*4*/ virtual bool canConsumePowerAnyDirection() const;
    /*5*/ virtual void __unk_vfn_0();
    /*6*/ virtual bool removeSource(class BlockPos const&, class BaseCircuitComponent const*);
    /*7*/ virtual bool addSource(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
    /*8*/ virtual bool allowConnection(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
    /*9*/ virtual void checkLock(class CircuitSystem&, class BlockPos const&);
    /*10*/ virtual bool evaluate(class CircuitSystem&, class BlockPos const&);
    /*11*/ virtual void cacheValues(class CircuitSystem&, class BlockPos const&);
    /*12*/ virtual void updateDependencies(class CircuitSceneGraph&, class BlockPos const&);
    /*13*/ virtual void __unk_vfn_1();
    /*14*/ virtual bool isHalfPulse() const;
    /*15*/ virtual void __unk_vfn_2();
    /*16*/ virtual bool isSecondaryPowered() const;
    /*17*/ virtual enum CircuitComponentType getCircuitComponentType() const;
    /*18*/ virtual unsigned char getPoweroutDirection() const;
    /*
    inline bool canConsumerPower() const{
        bool (ComparatorCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?canConsumerPower@ComparatorCapacitor@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI ComparatorCapacitor();
    MCAPI void clearAnalogStrength(unsigned char);
    MCAPI int getOldStrength();
    MCAPI bool isSubtractMode();
    MCAPI void setAnalogStrength(int, unsigned char);
    MCAPI void setMode(enum ComparatorCapacitor::Mode);

protected:

private:

};